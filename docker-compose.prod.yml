name: dentistFlow-prod

services:
  api:
    container_name: dentistFlow-api-prod
    build: 
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - app_logs:/app/logs
    depends_on:
      - db
      - minio
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_REGION=${MINIO_REGION}
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"
    networks:
      - app-network

  db:
    container_name: dentistFlow-db-prod
    image: postgres:16
    restart: unless-stopped
    shm_size: 256mb
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_prod:/var/lib/postgresql/data
      - db_backups:/var/lib/postgresql/backups
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9187"
    networks:
      - app-network

  minio:
    container_name: dentistFlow-minio-prod
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_prod:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network

  # Monitoring Services
  prometheus:
    container_name: dentistFlow-prometheus-prod
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - db
      - node-exporter
      - postgres-exporter
    networks:
      - app-network

  grafana:
    container_name: dentistFlow-grafana-prod
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_SECURITY_COOKIE_SECURE=false
    volumes:
      - grafana_prod:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - app-network

  node-exporter:
    container_name: dentistFlow-node-exporter-prod
    image: prom/node-exporter:latest
    restart: unless-stopped
    ports:
      - '9100:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network

  postgres-exporter:
    container_name: dentistFlow-postgres-exporter-prod
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - db
    networks:
      - app-network

  alertmanager:
    container_name: dentistFlow-alertmanager-prod
    image: prom/alertmanager:latest
    restart: unless-stopped
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_prod:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - app-network

  cadvisor:
    container_name: dentistFlow-cadvisor-prod
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - app-network

  nginx:
    container_name: dentistFlow-nginx-prod
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./monitoring/nginx.conf:/etc/nginx/nginx.conf
      - ./monitoring/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - grafana
    networks:
      - app-network

volumes:
  db_prod:
  minio_prod:
  prometheus_prod:
  grafana_prod:
  alertmanager_prod:
  app_logs:

networks:
  app-network:
    driver: bridge 